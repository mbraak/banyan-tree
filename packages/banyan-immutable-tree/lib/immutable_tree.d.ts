import { List } from "immutable";
import { Node, NodeId, INodeData } from "./immutable_node";
export declare class Tree {
    root: Node;
    private ids;
    private selected;
    constructor(data?: INodeData[]);
    toString(): string;
    getChildren(): List<Node>;
    hasChildren(): boolean;
    addNode(child: INodeData, parent?: Node): Tree;
    getNodeByName(name: string): Node | null;
    doGetNodeByName(name: string): Node;
    removeNode(n: Node): Tree;
    getNodeById(id: NodeId): Node | undefined;
    doGetNodeById(id: NodeId): Node;
    openNode(id: NodeId): Tree;
    closeNode(id: NodeId): Tree;
    isNodeOpen(id: NodeId): boolean;
    selectNode(id: NodeId): Tree;
    toggleNode(id: NodeId): Tree;
    updateNode(n: Node, attributes: any): Tree;
    openAllFolders(): Tree;
    openLevel(level: number): Tree;
    getSelectedNode(): Node | undefined;
    getIds(): NodeId[];
    getNodes(): Node[];
    handleKey(key: string): [boolean, Tree];
    getNextNode(n: Node): Node | undefined;
    getPreviousNode(n: Node): Node | undefined;
    private addNodeToRoot;
    private addNodeToParent;
    private getReadonlyNode;
    private getParents;
    private updateTree;
    private createCopy;
    private updateIds;
    private deselect;
}
//# sourceMappingURL=immutable_tree.d.ts.map