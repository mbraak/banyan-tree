{"version":3,"sources":["../src/redux/component.tsx"],"names":["actions","ReduxTree","tree","dispatch","renderTitle","tree_id","keyboardSupport","handleSelect","node","type","SELECT_NODE","node_id","get","handleToggle","TOGGLE_NODE","handleKey","key","HANDLE_KEY","plugins","props","onToggleNode","onSelectNode","createElement","Object","assign"],"mappings":";;;;;;AAAA;;;;AAEA;;AACA;;IAAYA,O;;AAGZ;;;;;;AAYA,IAAMC,YAAY,SAAZA,SAAY,OACuE;AAAA,QAAnFC,IAAmF,QAAnFA,IAAmF;AAAA,QAA7EC,QAA6E,QAA7EA,QAA6E;AAAA,QAAnEC,WAAmE,QAAnEA,WAAmE;AAAA,QAAtDC,OAAsD,QAAtDA,OAAsD;AAAA,oCAA7CC,eAA6C;AAAA,QAA7CA,eAA6C,wCAA3B,IAA2B;;AAErF,QAAMC,eAAe,SAAfA,YAAe,CAACC,IAAD,EAAW;AAC5BL,iBAAS;AACLM,kBAAMT,QAAQU,WADT;AAELC,qBAASH,KAAKI,GAAL,CAAS,IAAT,CAFJ;AAGLP;AAHK,SAAT;AAKH,KAND;AAQA,QAAMQ,eAAe,SAAfA,YAAe,CAACL,IAAD,EAAW;AAC5BL,iBAAS;AACLM,kBAAMT,QAAQc,WADT;AAELH,qBAASH,KAAKI,GAAL,CAAS,IAAT,CAFJ;AAGLP;AAHK,SAAT;AAKH,KAND;AAQA,QAAMU,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAY;AAC1Bb,iBAAS;AACLM,kBAAMT,QAAQiB,UADT;AAELD,oBAFK;AAGLX;AAHK,SAAT;AAMA,eAAO,IAAP;AACH,KARD;AAUA,QAAMa,UAAUZ,kBAAkB,CAAC,oCAAmBS,SAAnB,CAAD,CAAlB,GAAoD,EAApE;AAEA,QAAMI,QAAQ;AACVjB,kBADU;AAEVkB,sBAAcP,YAFJ;AAGVQ,sBAAcd,YAHJ;AAIVH,gCAJU;AAKVc;AALU,KAAd;AAQA,WAAO,gBAAAI,aAAA,yCAAkBC,OAAAC,MAAA,CAAA,EAAA,EAAKL,KAAL,CAAlB,CAAP;AACH,CAxCD;kBA0CelB,S","file":"component.js","sourcesContent":["import React from \"react\";\n\nimport { BaseTreeComponent, RenderNode } from \"../base_tree_component\";\nimport * as actions from \"./actions\";\nimport { Tree } from \"../immutable_tree\";\nimport { Node } from \"../immutable_node\";\nimport { KeyboardPlugin } from \"../keyboard_plugin\";\n\nexport type Dispatch = (...params: any[]) => void;\n\nexport interface ITreeComponentProps {\n    tree: Tree;\n    dispatch: Dispatch;\n    renderTitle?: RenderNode;\n    tree_id?: string;\n    keyboardSupport?: boolean;\n}\n\nconst ReduxTree = (\n    { tree, dispatch, renderTitle, tree_id, keyboardSupport = true }: ITreeComponentProps\n) => {\n    const handleSelect = (node: Node) => {\n        dispatch({\n            type: actions.SELECT_NODE,\n            node_id: node.get(\"id\"),\n            tree_id\n        });\n    };\n\n    const handleToggle = (node: Node) => {\n        dispatch({\n            type: actions.TOGGLE_NODE,\n            node_id: node.get(\"id\"),\n            tree_id\n        });\n    };\n\n    const handleKey = (key: string) => {\n        dispatch({\n            type: actions.HANDLE_KEY,\n            key,\n            tree_id\n        });\n\n        return true;\n    };\n\n    const plugins = keyboardSupport ? [new KeyboardPlugin(handleKey)] : [];\n\n    const props = {\n        tree,\n        onToggleNode: handleToggle,\n        onSelectNode: handleSelect,\n        renderTitle,\n        plugins\n    };\n\n    return <BaseTreeComponent {...props} />;\n};\n\nexport default ReduxTree;\n"]}