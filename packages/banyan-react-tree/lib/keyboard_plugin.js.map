{"version":3,"sources":["../src/keyboard_plugin.ts"],"names":["KeyboardPlugin","onHandleKey","handleKey","bind","window","addEventListener","removeEventListener","event","key","canHandleKeyboard","is_handled","preventDefault","isArrowKey","isFocusOnTree","active_element","document","activeElement","tree_element","tree_proxy","getElement","isParentOf","parent","child","current_parent","parentElement"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAIMA,c,WAAAA,c;;;AAGF,4BAAYC,WAAZ,EAAmC;AAAA;;AAAA;;AAG/B,cAAKA,WAAL,GAAmBA,WAAnB;AAEA,cAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AAL+B;AAMlC;;;;4CAEuB;AACpBC,mBAAOC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKH,SAAxC;AACH;;;+CAE0B;AACvBE,mBAAOE,mBAAP,CAA2B,SAA3B,EAAsC,KAAKJ,SAA3C;AACH;;;kCAEmBK,K,EAAoB;AAAA,gBAC5BC,GAD4B,GACpBD,KADoB,CAC5BC,GAD4B;;AAEpC,gBAAMP,cAAc,KAAKA,WAAzB;AAEA,gBAAI,KAAKQ,iBAAL,CAAuBD,GAAvB,KAA+BP,WAAnC,EAAgD;AAC5C,oBAAMS,aAAaT,YAAYO,GAAZ,CAAnB;AAEA,oBAAIE,UAAJ,EAAgB;AACZH,0BAAMI,cAAN;AACH;AACJ;AACJ;;;0CAEyBH,G,EAAW;AACjC,mBACI,KAAKI,UAAL,CAAgBJ,GAAhB,GACA,KAAKK,aAAL,EAFJ;AAIH;;;mCAEkBL,G,EAAW;AAC1B,mBAAOA,QAAQ,SAAR,IAAqBA,QAAQ,WAA7B,IAA4CA,QAAQ,WAApD,IAAmEA,QAAQ,YAAlF;AACH;;;wCAEoB;AACjB,gBAAMM,iBAAiBC,SAASC,aAAhC;AACA,gBAAMC,eAAe,KAAKC,UAAL,IAAmB,KAAKA,UAAL,CAAgBC,UAAhB,EAAxC;AAEA,mBACIL,kBAAkB,IAAlB,IACAG,gBAAgB,IADhB,IAEAG,WAAWH,YAAX,EAAyBH,cAAzB,CAHJ;AAKH;;;;;;AAGL,SAAAM,UAAA,CAAoBC,MAApB,EAAqCC,KAArC,EAAuD;AACnD,QAAIC,iBAAiBD,MAAME,aAA3B;AAEA,WAAOD,cAAP,EAAuB;AACnB,YAAIA,mBAAmBF,MAAvB,EAA+B;AAC3B,mBAAO,IAAP;AACH;AAEDE,yBAAiBA,eAAeC,aAAhC;AACH;AAED,WAAO,KAAP;AACH","file":"keyboard_plugin.js","sourcesContent":["import { Plugin } from \"./plugin\";\n\nexport type HandleKey = (key: string) => boolean;\n\nexport class KeyboardPlugin extends Plugin {\n    private onHandleKey?: HandleKey;\n\n    constructor(onHandleKey?: HandleKey) {\n        super();\n\n        this.onHandleKey = onHandleKey;\n\n        this.handleKey = this.handleKey.bind(this);\n    }\n\n    public componentDidMount() {\n        window.addEventListener(\"keydown\", this.handleKey);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener(\"keydown\", this.handleKey);\n    }\n\n    protected handleKey(event: KeyboardEvent) {\n        const { key } = event;\n        const onHandleKey = this.onHandleKey;\n\n        if (this.canHandleKeyboard(key) && onHandleKey) {\n            const is_handled = onHandleKey(key);\n\n            if (is_handled) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    private canHandleKeyboard(key: string): boolean {\n        return (\n            this.isArrowKey(key),\n            this.isFocusOnTree()\n        );\n    }\n\n    private isArrowKey(key: string): boolean {\n        return key === \"ArrowUp\" || key === \"ArrowDown\" || key === \"ArrowLeft\" || key === \"ArrowRight\";\n    }\n\n    private isFocusOnTree(): boolean {\n        const active_element = document.activeElement;\n        const tree_element = this.tree_proxy && this.tree_proxy.getElement();\n\n        return (\n            active_element != null &&\n            tree_element != null &&\n            isParentOf(tree_element, active_element as any)\n        );\n    }\n}\n\nfunction isParentOf(parent: Element, child: HTMLElement): boolean {\n    let current_parent = child.parentElement;\n\n    while (current_parent) {\n        if (current_parent === parent) {\n            return true;\n        }\n\n        current_parent = current_parent.parentElement;\n    }\n\n    return false;\n}\n"]}