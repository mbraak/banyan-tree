{"version":3,"sources":["../src/mobx/tree_store.ts","mobx/tree_store.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","TreeStore","tree","node","selectNode","get","toggleNode","handleKey","is_handled","prototype"],"mappings":";;;;;;;;;;;;AAAA;;;;ACAA,IAAIA,aAAc,aAAQ,UAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,QAAIC,IAAIC,UAAUC,MAAlB;AAAA,QAA0BC,IAAIH,IAAI,CAAJ,GAAQH,MAAR,GAAiBE,SAAS,IAAT,GAAgBA,OAAOK,OAAOC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,QAA2HO,CAA3H;AACA,QAAI,QAAOC,OAAP,yCAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,QAAQC,QAAf,KAA4B,UAA/D,EAA2EL,IAAII,QAAQC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,IAAIb,WAAWM,MAAX,GAAoB,CAAjC,EAAoCO,KAAK,CAAzC,EAA4CA,GAA5C;AAAiD,YAAIH,IAAIV,WAAWa,CAAX,CAAR,EAAuBN,IAAI,CAACH,IAAI,CAAJ,GAAQM,EAAEH,CAAF,CAAR,GAAeH,IAAI,CAAJ,GAAQM,EAAET,MAAF,EAAUC,GAAV,EAAeK,CAAf,CAAR,GAA4BG,EAAET,MAAF,EAAUC,GAAV,CAA5C,KAA+DK,CAAnE;AAAxE,KACL,OAAOH,IAAI,CAAJ,IAASG,CAAT,IAAcC,OAAOM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;IDIcQ,S;AAGV,uBAAYC,IAAZ,EAAsB;AAAA;;AAClB,aAAKA,IAAL,GAAYA,IAAZ;AACH;;;;+BAEaC,I,EAAU;AACpB,iBAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUE,UAAV,CAAqBD,KAAKE,GAAL,CAAS,IAAT,CAArB,CAAZ;AACH;;;+BAEaF,I,EAAU;AACpB,iBAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUI,UAAV,CAAqBH,KAAKE,GAAL,CAAS,IAAT,CAArB,CAAZ;AACH;;;kCAEgBjB,G,EAAW;AAAA,kCACG,KAAKc,IAAL,CAAUK,SAAV,CAAoBnB,GAApB,CADH;AAAA;AAAA,gBACjBoB,UADiB;AAAA,gBACLN,IADK;;AAGxB,gBAAIM,UAAJ,EAAgB;AACZ,qBAAKN,IAAL,GAAYA,IAAZ;AAEA,uBAAO,IAAP;AACH;AACJ;;;;;;kBAvBSD,S;;AACEhB,WAAA,kBAAA,ECsBbgB,UAAUQ,SDtBG,ECsBQ,MDtBR,ECsBgB,KAAK,CDtBrB","file":"tree_store.js","sourcesContent":["import { observable } from \"mobx\";\nimport { Tree } from \"banyan-immutable-tree/lib/immutable_tree\";\nimport { Node } from \"banyan-immutable-tree/lib/immutable_node\";\n\nexport default class TreeStore {\n    @observable public tree: Tree;\n\n    constructor(tree: Tree) {\n        this.tree = tree;\n    }\n\n    public select(node: Node) {\n        this.tree = this.tree.selectNode(node.get(\"id\"));\n    }\n\n    public toggle(node: Node) {\n        this.tree = this.tree.toggleNode(node.get(\"id\"));\n    }\n\n    public handleKey(key: string): any {\n        const [is_handled, tree] = this.tree.handleKey(key);\n\n        if (is_handled) {\n            this.tree = tree;\n\n            return true;\n        }\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { observable } from \"mobx\";\nexport default class TreeStore {\n    constructor(tree) {\n        this.tree = tree;\n    }\n    select(node) {\n        this.tree = this.tree.selectNode(node.get(\"id\"));\n    }\n    toggle(node) {\n        this.tree = this.tree.toggleNode(node.get(\"id\"));\n    }\n    handleKey(key) {\n        const [is_handled, tree] = this.tree.handleKey(key);\n        if (is_handled) {\n            this.tree = tree;\n            return true;\n        }\n    }\n}\n__decorate([\n    observable\n], TreeStore.prototype, \"tree\", void 0);\n"]}