{"version":3,"sources":["../src/base_tree_component.tsx"],"names":["inode","TreeNode","props","node","tree_context","renderTitle","handleClick","e","target","tagName","preventDefault","onSelectNode","is_folder","hasChildren","is_open_folder","get","is_selected","li_classes","createElement","key","className","role","onClick","TreeTitle","TreeButton","onToggleNode","TreeFolder","nextProps","Component","setRootElement","is_root","ul_classes","setRef","undefined","ref","getChildren","map","child","title_classes","node_title","tabindex","is_open","focusElement","el","focus","Object","assign","stopPropagation","button_classes","button_char","href","defaultRenderTitle","BaseTreeComponent","bind","plugins","connectPlugins","tree","root","plugin","componentDidMount","componentWillUnmount","root_element","element","setTreeProxy"],"mappings":"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","file":"base_tree_component.js","sourcesContent":["import React from \"react\";\n\nimport classNames from \"classnames\";\n\nimport { Tree } from \"./immutable_tree\";\nimport * as inode from \"./immutable_node\";\nimport { Node } from \"./immutable_node\";\nimport { Plugin, ITreeProxy } from \"./plugin\";\n\nexport type RenderNode = (node: Node) => JSX.Element;\n\nexport type NodeCallback = (node: Node) => void;\n\nexport type SetTreeElement = (element: Element) => void;\n\ninterface ITreeContext {\n    onToggleNode?: NodeCallback;\n    onSelectNode?: NodeCallback;\n    renderTitle: RenderNode;\n}\n\ninterface ITreeNodeProps {\n    node: Node;\n    tree_context: ITreeContext;\n}\n\nclass TreeNode extends React.Component<ITreeNodeProps, {}> {\n    public render(): JSX.Element|null {\n        const { node, tree_context } = this.props;\n        const { renderTitle } = tree_context;\n\n        function handleClick(e: React.MouseEvent<HTMLDivElement>) {\n            if ((e.target as any).tagName !== \"A\") {\n                e.preventDefault();\n\n                if (tree_context.onSelectNode) {\n                    tree_context.onSelectNode(node);\n                }\n            }\n        }\n\n        const is_folder = inode.hasChildren(node);\n        const is_open_folder = is_folder && node.get(\"is_open\");\n        const is_selected = node.get(\"is_selected\");\n\n        const li_classes = classNames({\n            \"banyan-common\": true,\n            \"banyan-closed\": is_folder && !node.get(\"is_open\"),\n            \"banyan-folder\": is_folder,\n            \"banyan-selected\": is_selected\n        });\n\n        return (\n            <li key={node.get(\"id\")} className={li_classes} role=\"presentation\">\n                <div className=\"banyan-element banyan-common\" onClick={handleClick} role=\"presentation\">\n                    <TreeTitle node={node} renderTitle={renderTitle} />\n                    {is_folder ? <TreeButton node={node} onToggleNode={tree_context.onToggleNode} /> : null}\n                </div>\n                {is_open_folder\n                    ? <TreeFolder node={node} tree_context={tree_context} />\n                    : null\n                }\n            </li>\n        );\n    }\n\n    public shouldComponentUpdate(nextProps: ITreeNodeProps): boolean {\n        return nextProps.node !== this.props.node;\n    }\n}\n\ninterface ITreeFolderProps {\n    node: Node;\n    tree_context: ITreeContext;\n    setRootElement?: SetTreeElement;\n}\n\nfunction TreeFolder({ node, tree_context, setRootElement }: ITreeFolderProps) {\n    const is_root = node.get(\"is_root\");\n\n    const ul_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-tree\": is_root\n    });\n\n    const role = is_root ? \"tree\" : \"node\";\n\n    const setRef = is_root ? setRootElement : undefined;\n\n    return (\n        <ul className={ul_classes} role={role} ref={setRef}>\n            {inode.getChildren(node).map(\n                (child: Node) => (\n                    <TreeNode\n                        key={child.get(\"id\")} node={child} tree_context={tree_context}\n                    />\n                )\n            )}\n        </ul>\n    );\n}\n\ninterface ITreeTitleProps {\n    node: Node;\n    renderTitle: RenderNode;\n}\n\nfunction TreeTitle({ node, renderTitle }: ITreeTitleProps) {\n    const title_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-title\": true,\n        \"banyan-title-folder\": inode.hasChildren(node)\n    });\n\n    const is_selected = node.get(\"is_selected\");\n\n    const node_title = renderTitle(node);\n    const tabindex = is_selected ? 0 : -1;\n    const is_open = node.get(\"is_open\");\n\n    const focusElement = (el: HTMLElement) => {\n        if (el) {\n            el.focus();\n        }\n    };\n\n    const props = {\n        \"className\": title_classes,\n        \"tabIndex\": tabindex,\n        \"role\": \"treeitem\",\n        \"aria-selected\": is_selected,\n        \"aria-expanded\": is_open,\n        \"ref\": is_selected ? focusElement : undefined\n    };\n\n    // todo: aria-level\n\n    return (\n        <span {...props}>\n            { node_title }\n        </span>\n    );\n}\n\ninterface ITreeButtonProps {\n    node: Node;\n    onToggleNode?: NodeCallback;\n}\n\nfunction TreeButton({ node, onToggleNode }: ITreeButtonProps) {\n    function handleClick(e: React.MouseEvent<HTMLAnchorElement>) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (onToggleNode) {\n            onToggleNode(node);\n        }\n    }\n\n    const button_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-toggler\": true,\n        \"banyan-closed\": !node.get(\"is_open\")\n    });\n\n    const button_char = node.get(\"is_open\") ? \"▼\" : \"►\";\n\n    const props = {\n        \"className\": button_classes,\n        \"onClick\": handleClick,\n        \"role\": \"presentation\",\n        \"aria-hidden\": true,\n        \"tabIndex\": -1\n    };\n\n    return (\n        <a href=\"#\" {...props}>\n            {button_char}\n        </a>\n    );\n}\n\nconst defaultRenderTitle = (node: Node) => node.get(\"name\");\n\nexport interface IBaseTreeComponentProps {\n    tree: Tree;\n    onToggleNode?: NodeCallback;\n    onSelectNode?: NodeCallback;\n    renderTitle?: RenderNode;\n    plugins?: Plugin[];\n}\n\nexport class BaseTreeComponent extends React.Component<IBaseTreeComponentProps, void> implements ITreeProxy {\n    private root_element?: Element;\n    private plugins: Plugin[];\n\n    constructor(props: IBaseTreeComponentProps) {\n        super(props);\n\n        this.setRootElement = this.setRootElement.bind(this);\n        this.plugins = props.plugins || [];\n\n        this.connectPlugins();\n    }\n\n    public render() {\n        const { tree, onToggleNode, onSelectNode, renderTitle } = this.props;\n\n        const tree_context: ITreeContext = {\n            onToggleNode,\n            onSelectNode,\n            renderTitle: renderTitle || defaultRenderTitle\n        };\n\n        const props = {\n            node: tree.root,\n            tree_context,\n            setRootElement: this.setRootElement\n        };\n\n        return <TreeFolder {...props} />;\n    }\n\n    public componentDidMount() {\n        for (const plugin of this.plugins) {\n            plugin.componentDidMount();\n        }\n    }\n\n    public componentWillUnmount() {\n        for (const plugin of this.plugins) {\n            plugin.componentWillUnmount();\n        }\n    }\n\n    public getElement() {\n        return this.root_element;\n    }\n\n    private setRootElement(element: Element) {\n        this.root_element = element;\n    }\n\n    private connectPlugins() {\n        for (const plugin of this.plugins) {\n            plugin.setTreeProxy(this);\n        }\n    }\n}\n"]}