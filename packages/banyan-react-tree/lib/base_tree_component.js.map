{"version":3,"sources":["../src/base_tree_component.tsx"],"names":[],"mappings":"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","file":"base_tree_component.js","sourcesContent":["import React from \"react\";\n\nimport classNames from \"classnames\";\nimport { Tree } from \"banyan-immutable-tree/lib/immutable_tree\";\nimport * as inode from \"banyan-immutable-tree/lib/immutable_node\";\nimport { Node } from \"banyan-immutable-tree/lib/immutable_node\";\n\nimport { Plugin, ITreeProxy } from \"./plugin\";\n\nexport type RenderNode = (node: Node) => JSX.Element;\n\nexport type NodeCallback = (node: Node) => void;\n\nexport type SetTreeElement = (instance: HTMLUListElement) => any;\n\ninterface ITreeContext {\n    onToggleNode?: NodeCallback;\n    onSelectNode?: NodeCallback;\n    renderTitle: RenderNode;\n}\n\ninterface ITreeNodeProps {\n    node: Node;\n    tree_context: ITreeContext;\n}\n\nclass TreeNode extends React.Component<ITreeNodeProps> {\n    public render(): JSX.Element | null {\n        const { node, tree_context } = this.props;\n        const { renderTitle } = tree_context;\n\n        function handleClick(e: React.MouseEvent<HTMLDivElement>) {\n            if ((e.target as any).tagName !== \"A\") {\n                e.preventDefault();\n\n                if (tree_context.onSelectNode) {\n                    tree_context.onSelectNode(node);\n                }\n            }\n        }\n\n        const is_folder = inode.hasChildren(node);\n        const is_open_folder = is_folder && node.get(\"is_open\");\n        const is_selected = node.get(\"is_selected\");\n\n        const li_classes = classNames({\n            \"banyan-common\": true,\n            \"banyan-closed\": is_folder && !node.get(\"is_open\"),\n            \"banyan-folder\": is_folder,\n            \"banyan-selected\": is_selected\n        });\n\n        return (\n            <li key={node.get(\"id\")} className={li_classes} role=\"presentation\">\n                <div\n                    className=\"banyan-element banyan-common\"\n                    onClick={handleClick}\n                    role=\"presentation\"\n                >\n                    <TreeTitle node={node} renderTitle={renderTitle} />\n                    {is_folder ? (\n                        <TreeButton\n                            node={node}\n                            onToggleNode={tree_context.onToggleNode}\n                        />\n                    ) : null}\n                </div>\n                {is_open_folder ? (\n                    <TreeFolder node={node} tree_context={tree_context} />\n                ) : null}\n            </li>\n        );\n    }\n\n    public shouldComponentUpdate(nextProps: ITreeNodeProps): boolean {\n        return nextProps.node !== this.props.node;\n    }\n}\n\ninterface ITreeFolderProps {\n    node: Node;\n    tree_context: ITreeContext;\n    setRootElement?: SetTreeElement;\n}\n\nfunction TreeFolder({ node, tree_context, setRootElement }: ITreeFolderProps) {\n    const is_root = node.get(\"is_root\");\n\n    const ul_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-tree\": is_root\n    });\n\n    const role = is_root ? \"tree\" : \"node\";\n\n    const setRef = is_root ? setRootElement : undefined;\n\n    return (\n        <ul className={ul_classes} role={role} ref={setRef}>\n            {inode\n                .getChildren(node)\n                .map((child: Node) => (\n                    <TreeNode\n                        key={child.get(\"id\")}\n                        node={child}\n                        tree_context={tree_context}\n                    />\n                ))}\n        </ul>\n    );\n}\n\ninterface ITreeTitleProps {\n    node: Node;\n    renderTitle: RenderNode;\n}\n\nfunction TreeTitle({ node, renderTitle }: ITreeTitleProps) {\n    const title_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-title\": true,\n        \"banyan-title-folder\": inode.hasChildren(node)\n    });\n\n    const is_selected = node.get(\"is_selected\");\n\n    const node_title = renderTitle(node);\n    const tabindex = is_selected ? 0 : -1;\n    const is_open = node.get(\"is_open\");\n\n    const focusElement = (el: HTMLElement) => {\n        if (el) {\n            el.focus();\n        }\n    };\n\n    const props = {\n        className: title_classes,\n        tabIndex: tabindex,\n        role: \"treeitem\",\n        \"aria-selected\": is_selected,\n        \"aria-expanded\": is_open,\n        ref: is_selected ? focusElement : undefined\n    };\n\n    // todo: aria-level\n\n    return <span {...props}>{node_title}</span>;\n}\n\ninterface ITreeButtonProps {\n    node: Node;\n    onToggleNode?: NodeCallback;\n}\n\nfunction TreeButton({ node, onToggleNode }: ITreeButtonProps) {\n    function handleClick(e: React.MouseEvent<HTMLAnchorElement>) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (onToggleNode) {\n            onToggleNode(node);\n        }\n    }\n\n    const button_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-toggler\": true,\n        \"banyan-closed\": !node.get(\"is_open\")\n    });\n\n    const button_char = node.get(\"is_open\") ? \"▼\" : \"►\";\n\n    const props = {\n        className: button_classes,\n        onClick: handleClick,\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        tabIndex: -1\n    };\n\n    return (\n        <a href=\"#\" {...props}>\n            {button_char}\n        </a>\n    );\n}\n\nconst defaultRenderTitle = (node: Node) => node.get(\"name\");\n\nexport interface IBaseTreeComponentProps {\n    tree: Tree;\n    onToggleNode?: NodeCallback;\n    onSelectNode?: NodeCallback;\n    renderTitle?: RenderNode;\n    plugins?: Plugin[];\n}\n\nexport class BaseTreeComponent extends React.Component<IBaseTreeComponentProps>\n    implements ITreeProxy {\n    private root_element?: Element;\n    private plugins: Plugin[];\n\n    constructor(props: IBaseTreeComponentProps) {\n        super(props);\n\n        this.setRootElement = this.setRootElement.bind(this);\n        this.plugins = props.plugins || [];\n\n        this.connectPlugins();\n    }\n\n    public render() {\n        const { tree, onToggleNode, onSelectNode, renderTitle } = this.props;\n\n        const tree_context: ITreeContext = {\n            onToggleNode,\n            onSelectNode,\n            renderTitle: renderTitle || defaultRenderTitle\n        };\n\n        const props = {\n            node: tree.root,\n            tree_context,\n            setRootElement: this.setRootElement\n        };\n\n        return <TreeFolder {...props} />;\n    }\n\n    public componentDidMount() {\n        for (const plugin of this.plugins) {\n            plugin.componentDidMount();\n        }\n    }\n\n    public componentWillUnmount() {\n        for (const plugin of this.plugins) {\n            plugin.componentWillUnmount();\n        }\n    }\n\n    public getElement() {\n        return this.root_element;\n    }\n\n    private setRootElement(element: Element) {\n        this.root_element = element;\n    }\n\n    private connectPlugins() {\n        for (const plugin of this.plugins) {\n            plugin.setTreeProxy(this);\n        }\n    }\n}\n"]}