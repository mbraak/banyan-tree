{"version":3,"sources":["../src/immutable_node.ts"],"names":["create","toString","nodeListToString","hasChildren","getChildren","iterateTree","iterateTreeAndLevel","getNodeByName","doGetNodeByName","addNode","removeNode","updateNode","getNextNode","getPreviousNode","iterateTreeWithParents","createEmptyTree","createNode","is_root","data","createNodesFromData","parent_id","children_data","map","createNodeFromData","node_data","createChildren","children","id","set","nodesToString","nodes","join","node","has_children","isEmpty","get","name","n","treeSeqPath","is_branch","get_children","root","walk","path","toArray","new_path","push","child","parents","treeSeq","include_root","level","_","readonly_node","reverse","result","Error","readonly_parent","child_data","addNodeToNonRoot","addNodeToRoot","parent","new_child","new_parent","addChild","updateParents","new_root","changed_nodes","concat","initial_old_child","intitial_new_child","old_child","new_parents","replaceChild","child_index","indexOf","new_children","readonly_child","removeNodeFromRoot","removeNodeFromParent","removeChild","removed_nodes","Array","from","changed_parents","delete","attributes","new_node","merge","include_children","first","next_sibling","getNextSibling","getReadonlyParent","previous_sibling","getPreviousSibling","last","getChildIndex","index"],"mappings":"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","file":"immutable_node.js","sourcesContent":["import { List, Map } from \"immutable\";\n\nimport { first, last, dropRight, tail } from \"lodash\";\n\ndeclare module \"immutable\" {\n    // tslint:disable-next-line: interface-name\n    interface List<T> {\n        [Symbol.iterator](): IterableIterator<T>;\n    }\n}\n\nexport type Node = Map<string, any>;\n\ntype GetChildren = (node: Node) => List<Node>;\ntype IsBranch = (node: Node) => boolean;\n\nexport type NodeId = number|string;\n\nexport interface INodeData {\n    id: NodeId;\n    name: string;\n    children?: INodeData[];\n    [key: string]: any;\n}\n\nexport interface IReadonlyNode {\n    node: Node;\n    parents: Node[];\n}\n\nexport interface IRemoveInfo {\n    changed_nodes: Node[];\n    removed_nodes: Node[];\n}\n\nexport interface IUpdateInfo {\n    changed_nodes: Node[];\n}\n\nexport interface IAddInfo {\n    new_child: Node;\n    changed_nodes: Node[];\n}\n\nconst createEmptyTree = (): Node => createNode({ is_root: true });\n\nconst createNode = (data: any) => Map<string, any>(data) as any as Node;\n\nconst createNodesFromData = (parent_id: NodeId|null, children_data: INodeData[]): List<Node> => (\n    List(\n        children_data.map(\n            node_data => createNodeFromData(parent_id, node_data)\n        )\n    )\n);\n\nfunction createNodeFromData(parent_id: NodeId|null, node_data: INodeData): Node {\n    function createChildren() {\n        if (!node_data.children) {\n            return null;\n        }\n        else {\n            return createNodesFromData(node_data.id, node_data.children);\n        }\n    }\n\n    return Map<string, any>(node_data)\n        .set(\"parent_id\", parent_id)\n        .set(\"children\", createChildren()) as any as Node;\n}\n\nexport function create(children_data?: INodeData[]): Node {\n    function createChildren(): List<Node> {\n        if (children_data) {\n            return createNodesFromData(null, children_data);\n        }\n        else {\n            return List<Node>();\n        }\n    }\n\n    return createEmptyTree()\n        .set(\"children\", createChildren()) as Node;\n}\n\nfunction nodesToString(nodes: List<Node>): string {\n    return nodes\n        .map(toString)\n        .join(\" \");\n}\n\nexport function toString(node: Node): string {\n    const children = getChildren(node);\n    const has_children = !children.isEmpty();\n    const is_root = node.get(\"is_root\");\n    const name = node.get(\"name\");\n\n    if (is_root) {\n        if (!has_children) {\n            return \"\";\n        }\n        else {\n            return nodesToString(children);\n        }\n    }\n    else if (!has_children) {\n        return name;\n    }\n    else {\n        return `${name}(${nodesToString(children)})`;\n    }\n}\n\nexport function nodeListToString(nodes: Node[]): string {\n    return nodes\n        .map(\n            n => {\n                if (n.get(\"is_root\")) {\n                    return \"[root]\";\n                }\n                else {\n                    return n.get(\"name\");\n                }\n            }\n        )\n        .join(\" \");\n}\n\nexport function hasChildren(node: Node): boolean {\n    const children = node.get(\"children\");\n\n    if (!children) {\n        return false;\n    }\n    else {\n        return !children.isEmpty();\n    }\n}\n\nexport function getChildren(node: Node): List<Node> {\n    const children = node.get(\"children\");\n\n    if (children) {\n        return children;\n    }\n    else {\n        return List<Node>();\n    }\n}\n\n/* Iterates over tree. Return [node parents] pairs.\n  - generator\n  - walks depth-first\n*/\nfunction treeSeqPath(\n    is_branch: IsBranch, get_children: GetChildren, root: Node\n): Iterable<[Node, Node[]]> {\n    function* walk(path: List<Node>, node: Node): Iterable<[Node, Node[]]> {\n        yield [node, path.toArray()];\n\n        if (is_branch(node)) {\n            const children = get_children(node);\n            const new_path = path.push(node);\n\n            for (const child of children) {\n                yield* walk(new_path, child);\n            }\n        }\n    }\n\n    return walk(List<Node>(), root);\n}\n\n// Iterate tree; return lazy sequence of readonly nodes\n// - skip root\nfunction* iterateTreeWithParents(root: Node): Iterable<IReadonlyNode> {\n    for (const [node, parents] of treeSeqPath(hasChildren, getChildren, root)) {\n        if (node !== root) {\n            yield { node, parents };\n        }\n    }\n}\n\nfunction treeSeq(\n    is_branch: IsBranch, get_children: GetChildren, root: Node, include_root: boolean\n): Iterable<[Node, number]> {\n    function* walk(node: Node, level: number): Iterable<[Node, number]> {\n        if (node !== root || include_root) {\n            yield [node, level];\n        }\n\n        if (is_branch(node)) {\n            for (const child of get_children(node)) {\n                yield* walk(child, level + 1);\n            }\n        }\n    }\n\n    return walk(root, 0);\n}\n\nexport function* iterateTree(root: Node, include_root: boolean = false): Iterable<Node> {\n    for (const [node, _] of treeSeq(hasChildren, getChildren, root, include_root)) {\n        yield node;\n    }\n}\n\nexport function* iterateTreeAndLevel(root: Node): Iterable<[Node, number]> {\n    yield* treeSeq(hasChildren, getChildren, root, false);\n}\n\n// Find node by name; return readonly node or nil\nexport function getNodeByName(root: Node, name: string): IReadonlyNode|null {\n    for (const readonly_node of iterateTreeWithParents(root)) {\n        if (readonly_node.node.get(\"name\") === name) {\n            const { node, parents } = readonly_node;\n\n            return {\n                node,\n                parents: parents.reverse()\n            };\n        }\n    }\n\n    return null;\n}\n\nexport function doGetNodeByName(root: Node, name: string): IReadonlyNode {\n    const result = getNodeByName(root, name);\n\n    if (!result) {\n        throw Error(`Node ${name} not found`);\n    }\n\n    return result;\n}\n\n// Add node\n//  - return [new-root {new-child changed-nodes}]\nexport function addNode(root: Node, readonly_parent: any, child_data?: any): [Node, IAddInfo] {\n    if (child_data) {\n        return addNodeToNonRoot(readonly_parent, createNode(child_data));\n    }\n    else {\n        const data = readonly_parent;\n        return addNodeToRoot(root, createNode(data));\n    }\n}\n\nfunction addNodeToNonRoot(readonly_parent: IReadonlyNode, child: Node): [Node, IAddInfo] {\n    const parent = readonly_parent.node;\n    const new_child = child.set(\"parent_id\", parent.get(\"id\")) as Node;\n    const new_parent = addChild(parent, new_child);\n    const [new_root, changed_nodes] = updateParents(parent, new_parent, readonly_parent.parents);\n\n    return [\n        new_root,\n        {\n            new_child,\n            changed_nodes: [new_parent].concat(changed_nodes)\n        }\n    ];\n}\n\nfunction addNodeToRoot(root: Node, child: Node): [Node, IAddInfo] {\n    const new_root = addChild(root, child);\n\n    return [\n        new_root,\n        {\n            new_child: child,\n            changed_nodes: []\n        }\n    ];\n}\n\nfunction addChild(parent: Node, child: Node): Node {\n    const children = getChildren(parent);\n\n    return parent.set(\"children\", children.push(child)) as Node;\n}\n\n/*\n  Update parent of updated-node; also update the parents of the parent\n\n  - 'old-child' is replaced by 'new-child'\n  - 'parents' are the parents of the child; direct parent first\n  - returns: [new root, affected]\n*/\nfunction updateParents(initial_old_child: Node, intitial_new_child: Node, parents: Node[]): [Node, Node[]] {\n    let old_child = initial_old_child;\n    let new_child = intitial_new_child;\n\n    const new_parents = parents.map(\n        parent => {\n            const new_parent = replaceChild(parent, old_child, new_child);\n\n            old_child = parent;\n            new_child = new_parent;\n\n            return new_parent;\n        }\n    );\n\n    return [\n        last(new_parents),\n        dropRight(new_parents)\n    ];\n}\n\nfunction replaceChild(node: Node, old_child: Node, new_child: Node): Node {\n    const children = getChildren(node);\n    const child_index = children.indexOf(old_child);\n    const new_children = children.set(child_index, new_child);\n\n    return node.set(\"children\", new_children) as Node;\n}\n\n/*\n  Remove node\n  - return {new_root changed_nodes removed_nodes}\n*/\nexport function removeNode(readonly_child: IReadonlyNode): [Node, IRemoveInfo] {\n    const child = readonly_child.node;\n    const { parents } = readonly_child;\n    const parent = first(parents);\n\n    if (parent.get(\"is_root\")) {\n        return removeNodeFromRoot(parent, child);\n    }\n    else {\n        return removeNodeFromParent(parents, child);\n    }\n}\n\nfunction removeNodeFromRoot(root: Node, child: Node): [Node, IRemoveInfo] {\n    const new_root = removeChild(root, child);\n    const removed_nodes = Array.from(iterateTree(child, true));\n\n    return [\n        new_root,\n        {\n            changed_nodes: [],\n            removed_nodes\n        }\n    ];\n}\n\nfunction removeNodeFromParent(parents: Node[], child: Node): [Node, IRemoveInfo] {\n    const parent = first(parents);\n    const new_parent = removeChild(parent, child);\n    const [new_root, changed_parents] = updateParents(parent, new_parent, tail(parents));\n    const removed_nodes = Array.from(iterateTree(child, true));\n\n    return [\n        new_root,\n        {\n            changed_nodes: [new_parent].concat(changed_parents),\n            removed_nodes\n        }\n    ];\n}\n\nfunction removeChild(node: Node, child: Node): Node {\n    const children = getChildren(node);\n    const child_index = children.indexOf(child);\n    const new_children = children.delete(child_index);\n\n    return node.set(\"children\", new_children) as Node;\n}\n\nexport function updateNode(readonly_node: IReadonlyNode, attributes: any): [Node, IUpdateInfo] {\n    const { node, parents } = readonly_node;\n    const new_node = node.merge(attributes) as Node;\n    const [new_root, changed_parents] = updateParents(node, new_node, parents);\n\n    return [\n        new_root,\n        {\n            changed_nodes: [new_node].concat(changed_parents)\n        }\n    ];\n}\n\nexport function getNextNode(readonly_node: IReadonlyNode, include_children = true): Node|null {\n    const { node } = readonly_node;\n\n    if (include_children && hasChildren(node) && node.get(\"is_open\")) {\n        // First child\n        return getChildren(node).first();\n    }\n    else {\n        const next_sibling = getNextSibling(readonly_node);\n\n        if (next_sibling) {\n            // Next sibling\n            return next_sibling;\n        }\n        else {\n            const readonly_parent = getReadonlyParent(readonly_node);\n\n            if (!readonly_parent) {\n                return null;\n            }\n            else {\n                return getNextNode(readonly_parent, false);\n            }\n        }\n    }\n}\n\nfunction getReadonlyParent(node: IReadonlyNode): IReadonlyNode|null {\n    const { parents } = node;\n    const parent = first(parents);\n\n    if (!parent) {\n        return null;\n    }\n    else {\n        return {\n            node: parent,\n            parents: tail(parents)\n        };\n    }\n}\n\nexport function getPreviousNode(readonly_node: IReadonlyNode): Node|null {\n    const previous_sibling = getPreviousSibling(readonly_node);\n\n    if (!previous_sibling) {\n        // Parent\n        const parent = first(readonly_node.parents);\n\n        if (parent.get(\"is_root\")) {\n            return null;\n        }\n        else {\n            return parent;\n        }\n    }\n    else {\n        if (!hasChildren(previous_sibling) || !previous_sibling.get(\"is_open\")) {\n            // Previous sibling\n            return previous_sibling;\n        }\n        else {\n            // Last child of previous sibling\n            return getChildren(previous_sibling).last();\n        }\n    }\n}\n\nfunction getChildIndex(parent: Node, child: Node): number|null {\n    const index = getChildren(parent).indexOf(child);\n\n    if (index === -1) {\n        return null;\n    }\n    else {\n        return index;\n    }\n}\n\nfunction getNextSibling(readonly_node: IReadonlyNode): Node|null {\n    const { node, parents } = readonly_node;\n    const parent = first(parents);\n\n    if (!parent) {\n        return null;\n    }\n    else {\n        const child_index = getChildIndex(parent, node);\n\n        if (child_index === null) {\n            return null;\n        }\n        else {\n            return getChildren(parent).get(child_index + 1);\n        }\n    }\n}\n\nfunction getPreviousSibling(readonly_node: IReadonlyNode): Node|null {\n    const { node, parents } = readonly_node;\n    const parent = first(parents);\n\n    if (!parent) {\n        return null;\n    }\n    else {\n        const child_index = getChildIndex(parent, node);\n\n        if (child_index === null || child_index === 0) {\n            return null;\n        }\n        else {\n            return getChildren(parent).get(child_index - 1);\n        }\n    }\n}\n"]}