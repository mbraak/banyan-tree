{"version":3,"sources":["../src/tree_component.tsx"],"names":["TreeComponent","inode","actions","TreeNode","props","node","dispatch","handleClick","e","preventDefault","type","SELECT_NODE","node_id","id","is_folder","hasChildren","is_open_folder","is_open","is_selected","li_classes","createElement","key","className","onClick","TreeTitle","TreeButton","TreeFolder","nextProps","Component","ul_classes","is_root","getChildren","map","child","title_classes","name","TOGGLE_NODE","button_classes","button_char","href","tree","root"],"mappings":"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","file":"tree_component.js","sourcesContent":["import React from \"react\";\n\nimport classNames from \"classnames\";\n\nimport { Tree } from \"./immutable_tree\";\nimport * as inode from \"./immutable_node\";\nimport { Node } from \"./immutable_node\";\nimport * as actions from \"./actions\";\n\nexport type Dispatch = (...params: any[]) => void;\n\ninterface ITreeNodeProps {\n    node: Node;\n    dispatch: Dispatch;\n}\n\nclass TreeNode extends React.Component<ITreeNodeProps, {}> {\n    public render(): JSX.Element|null {\n        const { node, dispatch } = this.props;\n\n        function handleClick(e: React.MouseEvent<HTMLDivElement>) {\n            e.preventDefault();\n\n            dispatch({\n                type: actions.SELECT_NODE,\n                node_id: node.id\n            });\n        }\n\n        const is_folder = inode.hasChildren(node);\n        const is_open_folder = is_folder && node.is_open;\n        const is_selected = node.is_selected;\n\n        const li_classes = classNames({\n            \"banyan-common\": true,\n            \"banyan-closed\": is_folder && !node.is_open,\n            \"banyan-folder\": is_folder,\n            \"banyan-selected\": is_selected\n        });\n\n        return (\n            <li key={node.id} className={li_classes}>\n                <div className=\"banyan-element banyan-common\" onClick={handleClick}>\n                    <TreeTitle node={node} />\n                    {is_folder ? <TreeButton node={node} dispatch={dispatch} /> : null}\n                </div>\n                {is_open_folder ? <TreeFolder node={node} dispatch={dispatch} /> : null}\n            </li>\n        );\n    }\n\n    public shouldComponentUpdate(nextProps: ITreeNodeProps): boolean {\n        return nextProps.node !== this.props.node;\n    }\n}\n\nfunction TreeFolder({ node, dispatch }: {node: Node, dispatch: Dispatch}) {\n    const ul_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-tree\": node.is_root\n    });\n\n    return (\n        <ul className={ul_classes}>\n            {inode.getChildren(node).map(\n                (child: inode.Node) => <TreeNode key={child.id} node={child} dispatch={dispatch} />\n            )}\n        </ul>\n    );\n}\n\nfunction TreeTitle({ node }: {node: Node}) {\n    const title_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-title\": true,\n        \"banyan-title-folder\": inode.hasChildren(node)\n    });\n    // const random_number = Math.trunc(Math.random() * 100);\n    // {`${random_number}`}\n\n    return (\n        <span className={title_classes}>\n            {node.name}\n        </span>\n    );\n}\n\nfunction TreeButton({ node, dispatch }: {node: Node, dispatch: Dispatch}) {\n    function handleClick(e: React.MouseEvent<HTMLAnchorElement>) {\n        e.preventDefault();\n\n        dispatch({\n            type: actions.TOGGLE_NODE,\n            node_id: node.id\n        });\n    }\n\n    const button_classes = classNames({\n        \"banyan-common\": true,\n        \"banyan-toggler\": true,\n        \"banyan-closed\": !node.is_open\n    });\n\n    const button_char = node.is_open ? \"▼\" : \"►\";\n\n    return (\n        <a href=\"#\" className={button_classes} onClick={handleClick}>\n            {button_char}\n        </a>\n    );\n}\n\nexport default function TreeComponent({ tree, dispatch }: {tree: Tree, dispatch: Dispatch}) {\n    return <TreeFolder node={tree.root} dispatch={dispatch} />;\n}\n"]}