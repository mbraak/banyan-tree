{"version":3,"sources":["../src/tree_component.tsx"],"names":["TreeComponent","props","state","tree","handleToggle","bind","handleSelect","handleKey","renderTitle","keyboardSupport","createKeyboardPlugin","plugins","onToggleNode","onSelectNode","createElement","Object","assign","node","setState","toggleNode","get","selectNode","key","is_handled","new_tree","Component","defaultProps"],"mappings":";;;;;;;;;;;AAAA;;;;AAIA;;AACA;;;;;;;;;;IAYMA,a,WAAAA,a;;;AAQF,2BAAYC,KAAZ,EAAsC;AAAA;;AAAA,kIAC5BA,KAD4B;;AAGlC,cAAKC,KAAL,GAAa,EAAEC,MAAMF,MAAME,IAAd,EAAb;AAEA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,cAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,OAAjB;AAPkC;AAQrC;;;;iCAEY;AAAA;;AAAA,gBACDF,IADC,GACQ,KAAKD,KADb,CACDC,IADC;AAAA,yBAEgC,KAAKF,KAFrC;AAAA,gBAEDO,WAFC,UAEDA,WAFC;AAAA,gBAEYC,eAFZ,UAEYA,eAFZ;;AAIT,gBAAMC,uBAAuB,SAAvBA,oBAAuB;AAAA,uBAAM,oCAAmB,OAAKH,SAAxB,CAAN;AAAA,aAA7B;AAEA,gBAAMI,UAAUF,kBAAkB,CAACC,sBAAD,CAAlB,GAA6C,EAA7D;AAEA,gBAAMT,QAAQ;AACVE,0BADU;AAEVK,wCAFU;AAGVI,8BAAc,KAAKR,YAHT;AAIVS,8BAAc,KAAKP,YAJT;AAKVK;AALU,aAAd;AAQA,mBAAO,gBAAAG,aAAA,yCAAkBC,OAAAC,MAAA,CAAA,EAAA,EAAKf,KAAL,CAAlB,CAAP;AACH;;;qCAEoBgB,I,EAAU;AAAA,gBACnBd,IADmB,GACV,KAAKD,KADK,CACnBC,IADmB;;AAG3B,iBAAKe,QAAL,CAAc;AACVf,sBAAMA,KAAKgB,UAAL,CAAgBF,KAAKG,GAAL,CAAS,IAAT,CAAhB;AADI,aAAd;AAGH;;;qCAEoBH,I,EAAU;AAAA,gBACnBd,IADmB,GACV,KAAKD,KADK,CACnBC,IADmB;;AAG3B,iBAAKe,QAAL,CAAc;AACVf,sBAAMA,KAAKkB,UAAL,CAAgBJ,KAAKG,GAAL,CAAS,IAAT,CAAhB;AADI,aAAd;AAGH;;;kCAEiBE,G,EAAW;AAAA,gBACjBnB,IADiB,GACR,KAAKD,KADG,CACjBC,IADiB;;AAAA,kCAGMA,KAAKI,SAAL,CAAee,GAAf,CAHN;AAAA;AAAA,gBAGlBC,UAHkB;AAAA,gBAGNC,QAHM;;AAKzB,gBAAI,CAACD,UAAL,EAAiB;AACb,uBAAO,KAAP;AACH,aAFD,MAEO;AACH,qBAAKL,QAAL,CAAc,EAAEf,MAAMqB,QAAR,EAAd;AACA,uBAAO,IAAP;AACH;AACJ;;;;EAhE8B,gBAAMC,S;;AAIvBzB,cAAA0B,YAAA,GAA6C;AACvDjB,qBAAiB;AADsC,CAA7C","file":"tree_component.js","sourcesContent":["import React from \"react\";\nimport { Tree } from \"banyan-immutable-tree/lib/immutable_tree\";\nimport { Node } from \"banyan-immutable-tree/lib/immutable_node\";\n\nimport { BaseTreeComponent, RenderNode } from \"./base_tree_component\";\nimport { KeyboardPlugin } from \"./keyboard_plugin\";\n\nexport interface ITreeComponentProps {\n    tree: Tree;\n    renderTitle?: RenderNode;\n    keyboardSupport?: boolean;\n}\n\nexport interface ITreeComponentState {\n    tree: Tree;\n}\n\nexport class TreeComponent extends React.Component<\n    ITreeComponentProps,\n    ITreeComponentState\n> {\n    public static defaultProps: Partial<ITreeComponentProps> = {\n        keyboardSupport: true\n    };\n\n    constructor(props: ITreeComponentProps) {\n        super(props);\n\n        this.state = { tree: props.tree };\n\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleKey = this.handleKey.bind(this);\n    }\n\n    public render(): JSX.Element {\n        const { tree } = this.state;\n        const { renderTitle, keyboardSupport } = this.props;\n\n        const createKeyboardPlugin = () => new KeyboardPlugin(this.handleKey);\n\n        const plugins = keyboardSupport ? [createKeyboardPlugin()] : [];\n\n        const props = {\n            tree,\n            renderTitle,\n            onToggleNode: this.handleToggle,\n            onSelectNode: this.handleSelect,\n            plugins\n        };\n\n        return <BaseTreeComponent {...props} />;\n    }\n\n    private handleToggle(node: Node) {\n        const { tree } = this.state;\n\n        this.setState({\n            tree: tree.toggleNode(node.get(\"id\"))\n        });\n    }\n\n    private handleSelect(node: Node) {\n        const { tree } = this.state;\n\n        this.setState({\n            tree: tree.selectNode(node.get(\"id\"))\n        });\n    }\n\n    private handleKey(key: string): boolean {\n        const { tree } = this.state;\n\n        const [is_handled, new_tree] = tree.handleKey(key);\n\n        if (!is_handled) {\n            return false;\n        } else {\n            this.setState({ tree: new_tree });\n            return true;\n        }\n    }\n}\n"]}