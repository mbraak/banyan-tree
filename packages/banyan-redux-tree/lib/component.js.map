{"version":3,"sources":["../src/component.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,OAAO,EACH,iBAAiB,EAEpB,MAAM,2CAA2C,CAAC;AACnD,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AACrC,OAAO,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAC;AAYvE,MAAM,SAAS,GAAG,CAAC,EACf,IAAI,EACJ,QAAQ,EACR,WAAW,EACX,OAAO,EACP,eAAe,GAAG,IAAI,EACJ,EAAE,EAAE;IACtB,MAAM,YAAY,GAAG,CAAC,IAAU,EAAE,EAAE;QAChC,QAAQ,CAAC;YACL,IAAI,EAAE,OAAO,CAAC,WAAW;YACzB,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YACvB,OAAO;SACV,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,YAAY,GAAG,CAAC,IAAU,EAAE,EAAE;QAChC,QAAQ,CAAC;YACL,IAAI,EAAE,OAAO,CAAC,WAAW;YACzB,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YACvB,OAAO;SACV,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,EAAE;QAC9B,QAAQ,CAAC;YACL,IAAI,EAAE,OAAO,CAAC,UAAU;YACxB,GAAG;YACH,OAAO;SACV,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC;IAEF,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAEvE,MAAM,KAAK,GAAG;QACV,IAAI;QACJ,YAAY,EAAE,YAAY;QAC1B,YAAY,EAAE,YAAY;QAC1B,WAAW;QACX,OAAO;KACV,CAAC;IAEF,MAAM,CAAC,oBAAC,iBAAiB,oBAAK,KAAK,EAAI,CAAC;AAC5C,CAAC,CAAC;AAEF,eAAe,SAAS,CAAC","file":"component.js","sourcesContent":["import React from \"react\";\nimport { Tree } from \"banyan-immutable-tree/lib/immutable_tree\";\nimport { Node } from \"banyan-immutable-tree/lib/immutable_node\";\n\nimport {\n    BaseTreeComponent,\n    RenderNode\n} from \"banyan-react-tree/lib/base_tree_component\";\nimport * as actions from \"./actions\";\nimport { KeyboardPlugin } from \"banyan-react-tree/lib/keyboard_plugin\";\n\nexport type Dispatch = (...params: any[]) => void;\n\nexport interface ITreeComponentProps {\n    tree: Tree;\n    dispatch: Dispatch;\n    renderTitle?: RenderNode;\n    tree_id?: string;\n    keyboardSupport?: boolean;\n}\n\nconst ReduxTree = ({\n    tree,\n    dispatch,\n    renderTitle,\n    tree_id,\n    keyboardSupport = true\n}: ITreeComponentProps) => {\n    const handleSelect = (node: Node) => {\n        dispatch({\n            type: actions.SELECT_NODE,\n            node_id: node.get(\"id\"),\n            tree_id\n        });\n    };\n\n    const handleToggle = (node: Node) => {\n        dispatch({\n            type: actions.TOGGLE_NODE,\n            node_id: node.get(\"id\"),\n            tree_id\n        });\n    };\n\n    const handleKey = (key: string) => {\n        dispatch({\n            type: actions.HANDLE_KEY,\n            key,\n            tree_id\n        });\n\n        return true;\n    };\n\n    const plugins = keyboardSupport ? [new KeyboardPlugin(handleKey)] : [];\n\n    const props = {\n        tree,\n        onToggleNode: handleToggle,\n        onSelectNode: handleSelect,\n        renderTitle,\n        plugins\n    };\n\n    return <BaseTreeComponent {...props} />;\n};\n\nexport default ReduxTree;\n"]}